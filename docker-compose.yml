version: '3.8'

services:
  # PostgreSQL with pgvector extension
  postgres:
    image: pgvector/pgvector:pg16
    container_name: rezgenie_postgres
    environment:
      POSTGRES_DB: rezgenie
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d rezgenie"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rezgenie-network

  # Redis for Celery message broker and caching
  redis:
    image: redis:7-alpine
    container_name: rezgenie_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass redis123
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rezgenie-network

  # MinIO for file storage (S3 compatible)
  minio:
    image: minio/minio:latest
    container_name: rezgenie_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rezgenie-network

  # FastAPI backend application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: rezgenie_backend
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres123@postgres:5432/rezgenie
      - REDIS_URL=redis://:redis123@redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4o-mini}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-super-secret-jwt-key-change-in-production}
      - ENVIRONMENT=development
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - uploaded_files:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - rezgenie-network
    restart: unless-stopped

  # Celery worker for background tasks
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: rezgenie_celery_worker
    command: celery -A app.celery.celery_app worker --loglevel=info --concurrency=2
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres123@postgres:5432/rezgenie
      - REDIS_URL=redis://:redis123@redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENVIRONMENT=development
    volumes:
      - ./backend:/app
      - uploaded_files:/app/uploads
    depends_on:
      - postgres
      - redis
      - minio
    networks:
      - rezgenie-network
    restart: unless-stopped

  # Celery Flower for monitoring tasks
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: rezgenie_flower
    command: celery -A app.celery.celery_app flower --port=5555
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres123@postgres:5432/rezgenie
      - REDIS_URL=redis://:redis123@redis:6379/0
    ports:
      - "5555:5555"
    volumes:
      - ./backend:/app
    depends_on:
      - redis
    networks:
      - rezgenie-network
    restart: unless-stopped

  # Next.js frontend application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: rezgenie_frontend
    # Run in development mode to avoid requiring a pre-built .next directory
    command: npm run dev
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api/v1
      - NODE_ENV=development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - rezgenie-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  minio_data:
  uploaded_files:

networks:
  rezgenie-network:
    driver: bridge